<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                      xmlns:Custom="http://schemas.microsoft.com/winfx/2006/xaml/presentation/ribbon"
                    xmlns:Themes1="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Classic">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="../Resource/Shared.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <SolidColorBrush x:Key="TB_CB_Normal_BL_Color" Color="#FFAAAAAA"/>
    <SolidColorBrush x:Key="TB_CB_Normal_BG_Color" Color="#FFFFFFFF"/>

    <SolidColorBrush x:Key="TB_CB_Dis_BL_Color" Color="#FFD2D2D2"/>
    <SolidColorBrush x:Key="TB_CB_Dis_BG_Color" Color="#FFF8F8F8"/>
    <SolidColorBrush x:Key="TB_CB_Dis_Font_Color" Color="#FF909090"/>


    <Style TargetType="{x:Type Custom:RibbonComboBox}">
        <Setter Property="Background" Value="{StaticResource TB_CB_Normal_BG_Color}"/>
        <Setter Property="BorderBrush" Value="{StaticResource TB_CB_Normal_BL_Color}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="ContextMenu" Value="{x:Null}"/>
        <Setter Property="AllowDrop" Value="True"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="ToolTipService.InitialShowDelay" Value="900"/>
        <Setter Property="ToolTipService.ShowDuration" Value="20000"/>
        <Setter Property="ToolTipService.BetweenShowDelay" Value="0"/>
        <Setter Property="IsEditable" Value="True" />
        <Setter Property="IsReadOnly" Value="True" />
        <Setter Property="CanUserResizeVertically" Value="False" />
        <Setter Property="IsEnabled" Value="{Binding IsEnable}"/>
        <Setter Property="MouseOverBackground" Value ="{StaticResource TB_OVER_BG_COLOR}"/>
        <Setter Property="PressedBackground" Value ="{StaticResource TB_PRESS_BG_COLOR}"/>
        <Setter Property="Text" Value="{Binding sText,Mode=TwoWay}"/>
        <Setter Property="QuickAccessToolBarControlSizeDefinition">
            <Setter.Value>
                <Custom:RibbonControlSizeDefinition IsLabelVisible="False" ImageSize="Small"/>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Custom:RibbonComboBox}">
                    <Border x:Name="MainBorder" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}">
                        <Grid Margin="1,0" SnapsToDevicePixels="True">
                            <Grid Grid.Column="1" Height="20" Grid.IsSharedSizeScope="True">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition/>
                                        <ColumnDefinition SharedSizeGroup="ToggleButtonGroup" Width="Auto"/>
                                    </Grid.ColumnDefinitions>
                                    <Grid HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" IsHitTestVisible="False" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Width="{TemplateBinding SelectionBoxWidth}">
                                        <ContentPresenter x:Name="PART_ContentHost" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" Content="{TemplateBinding SelectionBoxItem}" ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}" Margin="2,0">
                                        </ContentPresenter>
                                    </Grid>
                                    <Custom:RibbonToggleButton x:Name="PART_ToggleButton" BorderBrush="Transparent" BorderThickness="{TemplateBinding BorderThickness}" Background="Transparent" CheckedBackground="{TemplateBinding PressedBackground}" Grid.ColumnSpan="2" CheckedBorderBrush="{TemplateBinding PressedBorderBrush}" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" PressedBorderBrush="{TemplateBinding PressedBorderBrush}" PressedBackground="{TemplateBinding PressedBackground}">
                                        <Custom:RibbonToggleButton.Style>
                                            <Style TargetType="{x:Type Custom:RibbonToggleButton}">
                                                <Setter Property="MouseOverBorderBrush" Value="{Binding Ribbon.MouseOverBorderBrush, RelativeSource={RelativeSource Self}}"/>
                                                <Setter Property="MouseOverBackground" Value="{Binding Ribbon.MouseOverBackground, RelativeSource={RelativeSource Self}}"/>
                                                <Setter Property="PressedBorderBrush" Value="{Binding Ribbon.PressedBorderBrush, RelativeSource={RelativeSource Self}}"/>
                                                <Setter Property="PressedBackground" Value="{Binding Ribbon.PressedBackground, RelativeSource={RelativeSource Self}}"/>
                                                <Setter Property="CheckedBorderBrush" Value="{Binding Ribbon.CheckedBorderBrush, RelativeSource={RelativeSource Self}}"/>
                                                <Setter Property="CheckedBackground" Value="{Binding Ribbon.CheckedBackground, RelativeSource={RelativeSource Self}}"/>
                                                <Setter Property="FocusedBorderBrush" Value="{Binding Ribbon.FocusedBorderBrush, RelativeSource={RelativeSource Self}}"/>
                                                <Setter Property="FocusedBackground" Value="{Binding Ribbon.FocusedBackground, RelativeSource={RelativeSource Self}}"/>
                                                <Setter Property="ClickMode" Value="Press"/>
                                                <Setter Property="BorderThickness" Value="1"/>
                                                <Setter Property="Template">
                                                    <Setter.Value>
                                                        <ControlTemplate TargetType="{x:Type Custom:RibbonToggleButton}">
                                                            <Grid Background="Transparent">
                                                                <Grid.ColumnDefinitions>
                                                                    <ColumnDefinition Width="*"/>
                                                                    <ColumnDefinition SharedSizeGroup="ToggleButtonGroup" Width="Auto"/>
                                                                </Grid.ColumnDefinitions>
                                                                <Border x:Name="OuterBorder" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Grid.Column="1" SnapsToDevicePixels="True" Width="14">
                                                                    <Border x:Name="InnerBorder" BorderBrush="Transparent" BorderThickness="1" Background="Transparent" SnapsToDevicePixels="True">
                                                                        <Path x:Name="Arrow" Data="M0,0L2.5,3 5,0z" Fill="{TemplateBinding Foreground}" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                                                    </Border>
                                                                </Border>
                                                            </Grid>
                                                            <ControlTemplate.Triggers>
                                                                <Trigger Property="IsMouseOver" Value="True">
                                                                    <Setter Property="Background" TargetName="OuterBorder" Value="{Binding MouseOverBackground, RelativeSource={RelativeSource TemplatedParent}}"/>
                                                                    <Setter Property="BorderBrush" TargetName="OuterBorder" Value="{Binding MouseOverBorderBrush, RelativeSource={RelativeSource TemplatedParent}}"/>
                                                                    <Setter Property="BorderBrush" TargetName="InnerBorder" Value="#80FFFFFF"/>
                                                                </Trigger>
                                                                <Trigger Property="IsKeyboardFocused" Value="True">
                                                                    <Setter Property="Background" TargetName="OuterBorder" Value="{Binding FocusedBackground, RelativeSource={RelativeSource TemplatedParent}}"/>
                                                                    <Setter Property="BorderBrush" TargetName="OuterBorder" Value="{Binding FocusedBorderBrush, RelativeSource={RelativeSource TemplatedParent}}"/>
                                                                    <Setter Property="BorderBrush" TargetName="InnerBorder" Value="#80FFFFFF"/>
                                                                </Trigger>
                                                                <Trigger Property="IsChecked" Value="True">
                                                                    <Setter Property="Background" TargetName="OuterBorder" Value="{Binding CheckedBackground, RelativeSource={RelativeSource TemplatedParent}}"/>
                                                                    <Setter Property="BorderBrush" TargetName="OuterBorder" Value="{Binding CheckedBorderBrush, RelativeSource={RelativeSource TemplatedParent}}"/>
                                                                    <!--<Setter Property="BorderBrush" TargetName="InnerBorder">
                                                                        <Setter.Value>
                                                                            <LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
                                                                                <GradientStop Color="#FFE7CBAD" Offset="0"/>
                                                                                <GradientStop Color="#FFF7D7B5" Offset="0.1"/>
                                                                                <GradientStop Color="#FFFFD38C" Offset="0.36"/>
                                                                                <GradientStop Color="#FFFFC75A" Offset="0.36"/>
                                                                                <GradientStop Color="#FFFFEFA5" Offset="1"/>
                                                                            </LinearGradientBrush>
                                                                        </Setter.Value>
                                                                    </Setter>-->
                                                                </Trigger>
                                                                <Trigger Property="IsPressed" Value="True">
                                                                    <Setter Property="Background" TargetName="OuterBorder" Value="{Binding PressedBackground, RelativeSource={RelativeSource TemplatedParent}}"/>
                                                                    <Setter Property="BorderBrush" TargetName="OuterBorder" Value="{Binding PressedBorderBrush, RelativeSource={RelativeSource TemplatedParent}}"/>
                                                                    <Setter Property="BorderBrush" TargetName="InnerBorder" Value="Transparent"/>
                                                                </Trigger>
                                                                <!--<MultiDataTrigger>
                                                                    <MultiDataTrigger.Conditions>
                                                                        <Condition Binding="{Binding IsChecked, RelativeSource={RelativeSource Self}}" Value="True"/>
                                                                        <Condition Binding="{Binding HighContrast}" Value="True"/>
                                                                    </MultiDataTrigger.Conditions>
                                                                    <Setter Property="Background" TargetName="OuterBorder" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                                                                    <Setter Property="BorderBrush" TargetName="OuterBorder" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
                                                                    <Setter Property="BorderBrush" TargetName="InnerBorder" Value="Transparent"/>
                                                                    <Setter Property="Fill" TargetName="Arrow" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>
                                                                </MultiDataTrigger>
                                                                <MultiDataTrigger>
                                                                    <MultiDataTrigger.Conditions>
                                                                        <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="True"/>
                                                                        <Condition Binding="{Binding HighContrast}" Value="True"/>
                                                                    </MultiDataTrigger.Conditions>
                                                                    <Setter Property="Background" TargetName="OuterBorder" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                                                                    <Setter Property="BorderBrush" TargetName="OuterBorder" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
                                                                    <Setter Property="Fill" TargetName="Arrow" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>
                                                                </MultiDataTrigger>
                                                                <MultiDataTrigger>
                                                                    <MultiDataTrigger.Conditions>
                                                                        <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="True"/>
                                                                        <Condition Binding="{Binding HighContrast}" Value="True"/>
                                                                    </MultiDataTrigger.Conditions>
                                                                    <Setter Property="Background" TargetName="OuterBorder" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                                                                    <Setter Property="BorderBrush" TargetName="OuterBorder" Value="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}"/>
                                                                    <Setter Property="BorderBrush" TargetName="InnerBorder" Value="Transparent"/>
                                                                    <Setter Property="Fill" TargetName="Arrow" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>
                                                                </MultiDataTrigger>
                                                                <MultiDataTrigger>
                                                                    <MultiDataTrigger.Conditions>
                                                                        <Condition Binding="{Binding IsKeyboardFocused, RelativeSource={RelativeSource Self}}" Value="True"/>
                                                                        <Condition Binding="{Binding HighContrast}" Value="True"/>
                                                                    </MultiDataTrigger.Conditions>
                                                                    <Setter Property="Background" TargetName="OuterBorder" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                                                                    <Setter Property="BorderBrush" TargetName="OuterBorder" Value="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}"/>
                                                                    <Setter Property="BorderBrush" TargetName="InnerBorder" Value="Transparent"/>
                                                                    <Setter Property="Fill" TargetName="Arrow" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>
                                                                </MultiDataTrigger>
                                                                <MultiDataTrigger>
                                                                    <MultiDataTrigger.Conditions>
                                                                        <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="True"/>
                                                                        <Condition Binding="{Binding IsChecked, RelativeSource={RelativeSource Self}}" Value="True"/>
                                                                        <Condition Binding="{Binding HighContrast}" Value="True"/>
                                                                    </MultiDataTrigger.Conditions>
                                                                    <Setter Property="BorderBrush" TargetName="OuterBorder" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                                                                </MultiDataTrigger>-->
                                                            </ControlTemplate.Triggers>
                                                        </ControlTemplate>
                                                    </Setter.Value>
                                                </Setter>
                                            </Style>
                                        </Custom:RibbonToggleButton.Style>
                                    </Custom:RibbonToggleButton>
                                </Grid>
                            <Popup x:Name="PART_Popup" AllowsTransparency="True" Focusable="False" HorizontalOffset="-2" IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}" PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}" Placement="Bottom" VerticalOffset="-1">
                                <Themes1:SystemDropShadowChrome x:Name="Shadow" Color="Transparent" RenderOptions.ClearTypeHint="Enabled" KeyTipService.IsKeyTipScope="True" >
                                    <Border x:Name="MenuBorder" BorderBrush="{Binding BorderBrush, RelativeSource={RelativeSource TemplatedParent}}" BorderThickness="{TemplateBinding BorderThickness}" Background="{Binding Ribbon.Background, RelativeSource={RelativeSource TemplatedParent}}" CornerRadius="0">
                                        <!--<Border x:Name="SubMenuInnerBorder"   Background="#F0FFFFFF" CornerRadius="0">-->
                                            <Grid>
                                                <ItemsPresenter  x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Cycle" Grid.IsSharedSizeScope="True"  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" KeyboardNavigation.TabNavigation="Cycle"/>
                                            </Grid>
                                        <!--</Border>-->
                                    </Border>
                                </Themes1:SystemDropShadowChrome>
                            </Popup>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding ControlSizeDefinition.Width.IsStar, RelativeSource={RelativeSource Self}}" Value="True">
                            <Setter Property="Width" TargetName="PART_ContentHost" Value="Auto"/>
                            <Setter Property="HorizontalAlignment" TargetName="PART_ContentHost" Value="Stretch"/>
                        </DataTrigger>
                      
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding HighContrast}" Value="False"/>
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="BorderBrush" TargetName="MainBorder" Value="{Binding MouseOverBorderBrush, RelativeSource={RelativeSource TemplatedParent}}"/>
                            <Setter Property="Background" TargetName="MainBorder" Value="{Binding MouseOverBackground, RelativeSource={RelativeSource TemplatedParent}}"/>
                            <!--<Setter Property="BorderBrush" TargetName="PART_ToggleButton" Value="{Binding MouseOverBorderBrush, RelativeSource={RelativeSource TemplatedParent}}"/>
                            <Setter Property="Background" TargetName="PART_ToggleButton">
                                <Setter.Value>
                                    <LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
                                        <GradientStop Color="#FFE4F0FE" Offset="0"/>
                                        <GradientStop Color="#FFE4F0FE" Offset="0.49"/>
                                        <GradientStop Color="#FFCFDFF3" Offset="0.5"/>
                                        <GradientStop Color="#FFE8F1FD" Offset="1"/>
                                    </LinearGradientBrush>
                                </Setter.Value>
                            </Setter>-->
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding HighContrast}" Value="False"/>
                                <Condition Binding="{Binding IsKeyboardFocused, ElementName=PART_ToggleButton}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="MainBorder" Value="{Binding FocusedBackground, RelativeSource={RelativeSource TemplatedParent}}"/>
                            <Setter Property="BorderBrush" TargetName="MainBorder" Value="{Binding FocusedBorderBrush, RelativeSource={RelativeSource TemplatedParent}}"/>
                        </MultiDataTrigger>
                      
                        <Trigger Property="IsEnabled" Value="False">
                           
                            <Setter Property="Background" TargetName="MainBorder" Value="#F8F8F8F8"/>
                            <Setter Property="BorderBrush" TargetName="MainBorder" Value="#D2D2D2D2"/>
                            <Setter Property="TextElement.Foreground" TargetName="MainBorder" Value="#90909090"/>
                        </Trigger>
                        <Trigger Property="IsInControlGroup" Value="True">
                            <Setter Property="BorderBrush" TargetName="MainBorder" Value="{Binding Ribbon.BorderBrush, RelativeSource={RelativeSource TemplatedParent}}"/>
                            <Setter Property="BorderThickness" TargetName="MainBorder" Value="0,0,1,0"/>
                        </Trigger>
                    
                        <Trigger Property="HasDropShadow" SourceName="PART_Popup" Value="True">
                            <Setter Property="Margin" TargetName="Shadow" Value="0,0,5,5"/>
                            <Setter Property="Color" TargetName="Shadow" Value="#FFE4E4E4"/>
                        </Trigger>
                        <Trigger Property="IsOpen" SourceName="PART_Popup" Value="False">
                            <Setter Property="PopupAnimation" TargetName="PART_Popup" Value="None"/>
                        </Trigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsOpen"  SourceName="PART_Popup"  Value="True"/>
                                <Condition Property="IsEnabled"  Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="MainBorder" Value="#FFEBF1FF"/>
                        </MultiTrigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition Property="IsEnabled"  Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="MainBorder" Value="#FFEBF1FF"/>
                        </MultiTrigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsDropDownOpen" Value="True">
                <Setter Property="ToolTipService.IsEnabled" Value="False"/>
            </Trigger>
            <Trigger Property="IsEditable" Value="True">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Custom:RibbonComboBox}">
                            <Border x:Name="MainBorder" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}">
                                <Grid Margin="0,0" SnapsToDevicePixels="True">
                                        <Grid Grid.Column="1" Height="22">
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition/>
                                                <ColumnDefinition Width="Auto"/>
                                            </Grid.ColumnDefinitions>
                                            <TextBox x:Name="PART_EditableTextBox" Background="Transparent"  IsReadOnly="{Binding IsReadOnly, RelativeSource={RelativeSource TemplatedParent}}" Margin="{TemplateBinding Padding}" Width="{TemplateBinding SelectionBoxWidth}">
                                                <TextBox.Style>
                                                    <Style TargetType="{x:Type TextBox}">
                                                        <Setter Property="OverridesDefaultStyle" Value="True"/>
                                                        <Setter Property="AllowDrop" Value="True"/>
                                                        <Setter Property="MinWidth" Value="0"/>
                                                        <Setter Property="MinHeight" Value="0"/>
                                                        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
                                                        <Setter Property="Template">
                                                            <Setter.Value>
                                                                <ControlTemplate TargetType="{x:Type TextBox}">
                                                                    <ScrollViewer x:Name="PART_ContentHost" Background="Transparent" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden" VerticalAlignment="Center">
                                                                        <ScrollViewer.ContentTemplate>
                                                                            <DataTemplate>
                                                                                <Grid RenderOptions.ClearTypeHint="Enabled">
                                                                                    <ContentPresenter Content="{Binding}"/>
                                                                                </Grid>
                                                                            </DataTemplate>
                                                                        </ScrollViewer.ContentTemplate>
                                                                    </ScrollViewer>
                                                                </ControlTemplate>
                                                            </Setter.Value>
                                                        </Setter>
                                                    </Style>
                                                </TextBox.Style>
                                            </TextBox>
                                            <Custom:RibbonToggleButton x:Name="PART_ToggleButton" BorderBrush="Transparent" BorderThickness="{TemplateBinding BorderThickness}" 
                                                                       Background="{TemplateBinding Background}" CheckedBackground="{TemplateBinding PressedBackground}" 
                                                                       Grid.Column="1" CheckedBorderBrush="{TemplateBinding PressedBorderBrush}" IsTabStop="False" 
                                                                       IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" 
                                                                       PressedBorderBrush="{TemplateBinding PressedBorderBrush}" PressedBackground="{TemplateBinding PressedBackground}"
                                                                       MouseOverBackground="{TemplateBinding MouseOverBackground}">
                                                <Custom:RibbonToggleButton.Style>
                                                    <Style TargetType="{x:Type Custom:RibbonToggleButton}">
                                                        <Setter Property="MouseOverBorderBrush" Value="{Binding Ribbon.MouseOverBorderBrush, RelativeSource={RelativeSource Self}}"/>
                                                        <Setter Property="MouseOverBackground" Value="{Binding MouseOverBackground, RelativeSource={RelativeSource Self}}"/>
                                                        <Setter Property="PressedBorderBrush" Value="{Binding Ribbon.PressedBorderBrush, RelativeSource={RelativeSource Self}}"/>
                                                        <Setter Property="PressedBackground" Value="{Binding PressedBackground, RelativeSource={RelativeSource Self}}"/>
                                                        <Setter Property="CheckedBorderBrush" Value="{Binding Ribbon.CheckedBorderBrush, RelativeSource={RelativeSource Self}}"/>
                                                        <Setter Property="CheckedBackground" Value="{Binding Ribbon.CheckedBackground, RelativeSource={RelativeSource Self}}"/>
                                                        <Setter Property="FocusedBorderBrush" Value="{Binding Ribbon.FocusedBorderBrush, RelativeSource={RelativeSource Self}}"/>
                                                        <Setter Property="FocusedBackground" Value="{Binding Ribbon.FocusedBackground, RelativeSource={RelativeSource Self}}"/>
                                                        <Setter Property="ClickMode" Value="Press"/>
                                                        <Setter Property="BorderThickness" Value="1"/>
                                                        <Setter Property="Template">
                                                            <Setter.Value>
                                                                <ControlTemplate TargetType="{x:Type Custom:RibbonToggleButton}">
                                                                    <Border x:Name="OuterBorder" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" 
                                                                            Background="{TemplateBinding Background}" SnapsToDevicePixels="True" Width="14" Margin="0,-1,-1,-1">
                                                                        <Border x:Name="InnerBorder" BorderBrush="Transparent" BorderThickness="1" Background="Transparent" SnapsToDevicePixels="True">
                                                                            <Path x:Name="Arrow" Data="M0,0L2.5,3 5,0z" Fill="{TemplateBinding Foreground}" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                                                        </Border>
                                                                    </Border>
                                                                    <ControlTemplate.Triggers>
                                                                        <Trigger Property="IsMouseOver" Value="True">
                                                                        <Setter Property="Background" TargetName="OuterBorder" Value="{Binding MouseOverBackground, RelativeSource={RelativeSource TemplatedParent}}"/>
                                                                        <Setter Property="BorderBrush" TargetName="OuterBorder" Value="{Binding MouseOverBorderBrush, RelativeSource={RelativeSource TemplatedParent}}"/>
                                                                            <!--<Setter Property="BorderBrush" TargetName="InnerBorder" Value="#80FFFFFF"/>-->
                                                                        </Trigger>
                                                                        <Trigger Property="IsChecked" Value="True">
                                                                            <Setter Property="Background" TargetName="OuterBorder" Value="{Binding CheckedBackground, RelativeSource={RelativeSource TemplatedParent}}"/>
                                                                            <Setter Property="BorderBrush" TargetName="OuterBorder" Value="{Binding CheckedBorderBrush, RelativeSource={RelativeSource TemplatedParent}}"/>
                                                                        </Trigger>
                                                                        <Trigger Property="IsPressed" Value="True">
                                                                            <Setter Property="Background" TargetName="OuterBorder" Value="{Binding PressedBackground, RelativeSource={RelativeSource TemplatedParent}}"/>
                                                                            <Setter Property="BorderBrush" TargetName="OuterBorder" Value="{Binding PressedBorderBrush, RelativeSource={RelativeSource TemplatedParent}}"/>
                                                                            <!--<Setter Property="BorderBrush" TargetName="InnerBorder" Value="Transparent"/>-->
                                                                        </Trigger>
                                                                    <Trigger Property="IsEnabled" Value="False">
                                                                        <Setter Property="Background" TargetName="OuterBorder" Value="{StaticResource TB_CB_Dis_BG_Color}"/>
                                                                        <!--<Setter Property="BorderBrush" TargetName="OuterBorder" Value="{Binding PressedBorderBrush, RelativeSource={RelativeSource TemplatedParent}}"/>-->
                                                                        <!--<Setter Property="BorderBrush" TargetName="InnerBorder" Value="Transparent"/>-->
                                                                    </Trigger>
                                                                </ControlTemplate.Triggers>
                                                                </ControlTemplate>
                                                            </Setter.Value>
                                                        </Setter>
                                                    </Style>
                                                </Custom:RibbonToggleButton.Style>
                                            </Custom:RibbonToggleButton>
                                        </Grid>
                                    <Popup x:Name="PART_Popup" AllowsTransparency="True" Focusable="False" HorizontalOffset="-1" IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}" PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}" Placement="Bottom" VerticalOffset="-1">
                                        <Themes1:SystemDropShadowChrome x:Name="Shadow" Color="Transparent" RenderOptions.ClearTypeHint="Enabled" KeyTipService.IsKeyTipScope="True" >
                                            <Border x:Name="MenuBorder" BorderBrush="{Binding BorderBrush, RelativeSource={RelativeSource TemplatedParent}}" BorderThickness="{TemplateBinding BorderThickness}" Background="{Binding Ribbon.Background, RelativeSource={RelativeSource TemplatedParent}}" CornerRadius="0">
                                                <!--<Border x:Name="SubMenuInnerBorder" Background="#F0FFFFFF" CornerRadius="2">-->
                                                    <Grid>
                                                        <!--<Grid.RowDefinitions>
                                                            <RowDefinition Height="Auto"/>
                                                            <RowDefinition/>
                                                            <RowDefinition Height="Auto"/>
                                                        </Grid.RowDefinitions>-->
                                                        <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Cycle" Grid.IsSharedSizeScope="True"  Grid.Row="1" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" KeyboardNavigation.TabNavigation="Cycle"/>
                                                        
                                                    </Grid>
                                                <!--</Border>-->
                                            </Border>
                                        </Themes1:SystemDropShadowChrome>
                                    </Popup>
                                </Grid>
                            </Border>
                            <ControlTemplate.Triggers>
                                <DataTrigger Binding="{Binding ControlSizeDefinition.Width.IsStar, RelativeSource={RelativeSource Self}}" Value="True">
                                    <Setter Property="Width" TargetName="PART_EditableTextBox" Value="Auto"/>
                                </DataTrigger>
                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter Property="Background" TargetName="MainBorder" Value="{StaticResource TB_CB_Dis_BG_Color}"/>
                                    <Setter Property="BorderBrush" TargetName="MainBorder" Value="{StaticResource TB_CB_Dis_BL_Color}"/>
                                    <Setter Property="TextElement.Foreground" TargetName="MainBorder" Value="{StaticResource TB_CB_Dis_Font_Color}"/>
                                </Trigger>
                                <Trigger Property="IsInControlGroup" Value="True">
                                    <Setter Property="BorderBrush" TargetName="MainBorder" Value="{Binding Ribbon.BorderBrush, RelativeSource={RelativeSource TemplatedParent}}"/>
                                    <Setter Property="BorderThickness" TargetName="MainBorder" Value="0,0,1,0"/>
                                </Trigger>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="Background" TargetName="PART_ToggleButton" Value="{Binding MouseOverBackground, RelativeSource={RelativeSource TemplatedParent}}"/>
                                    <!--<Setter Property="BorderBrush" TargetName="MainBorder" Value="{Binding BorderBrush, RelativeSource={RelativeSource TemplatedParent}}"/>-->
                                </Trigger>
                                <Trigger Property="HasDropShadow" SourceName="PART_Popup" Value="True">
                                    <Setter Property="Margin" TargetName="Shadow" Value="0,0,5,5"/>
                                    <Setter Property="Color" TargetName="Shadow" Value="#71000000"/>
                                </Trigger>
                                <Trigger Property="IsOpen" SourceName="PART_Popup" Value="False">
                                    <Setter Property="PopupAnimation" TargetName="PART_Popup" Value="None"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>
</ResourceDictionary>