<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:Custom="http://schemas.microsoft.com/winfx/2006/xaml/presentation/ribbon">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="../Resource/Shared.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <Style  TargetType="{x:Type Custom:RibbonRadioButton}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="CornerRadius" Value="0"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="ContextMenu" Value="{x:Null}"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="MouseOverBorderBrush" Value="{StaticResource TB_OVER_BL_COLOR}"/>
        <Setter Property="MouseOverBackground" Value="{StaticResource TB_OVER_BG_COLOR}"/>
        <Setter Property="PressedBorderBrush" Value="{StaticResource TB_PRESS_BL_COLOR}"/>
        <Setter Property="PressedBackground" Value="{StaticResource TB_PRESS_BG_COLOR}"/>
        <Setter Property="CheckedBorderBrush" Value="{StaticResource TB_PRESS_BL_COLOR}"/>
        <Setter Property="CheckedBackground" Value="{StaticResource TB_PRESS_BG_COLOR}"/>
        <Setter Property="CommandParameter" Value="{Binding IsChecked,RelativeSource={RelativeSource Self}}"/>
        <Setter Property="ToolTipService.InitialShowDelay" Value="900"/>
        <Setter Property="ToolTipService.ShowDuration" Value="20000"/>
        <Setter Property="ToolTipService.BetweenShowDelay" Value="0"/>
        <Setter Property="QuickAccessToolBarControlSizeDefinition">
            <Setter.Value>
                <Custom:RibbonControlSizeDefinition IsLabelVisible="False" ImageSize="Small"/>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Custom:RibbonRadioButton}">
                    <Grid SnapsToDevicePixels="True">
                        <Border x:Name="OuterBorder" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="{TemplateBinding CornerRadius}"/>
                                <StackPanel x:Name="StackPanel" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}">
                                    <Image x:Name="PART_Image" RenderOptions.BitmapScalingMode="NearestNeighbor" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Height="32" Margin="1,1,1,2" Source="{TemplateBinding LargeImageSource}" VerticalAlignment="Center" Width="32"/>
                                    <Grid x:Name="Grid" HorizontalAlignment="Center" VerticalAlignment="Center">
                                        <Custom:RibbonTwoLineText x:Name="TwoLineText" HorizontalAlignment="Center" LineStackingStrategy="BlockLineHeight" LineHeight="13" Margin="1,1,1,0" TextAlignment="Center" Text="{TemplateBinding Label}" VerticalAlignment="Top"/>
                                    </Grid>
                                </StackPanel>
                       
                    </Grid>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding ControlSizeDefinition.ImageSize, RelativeSource={RelativeSource Self}}" Value="Large">
                            <Setter Property="MinWidth" Value="44"/>
                            <Setter Property="Height" Value="66"/>
                            <Setter Property="MinHeight" TargetName="Grid" Value="26"/>
                            <Setter Property="Custom:RibbonTwoLineText.HasTwoLines" TargetName="TwoLineText" Value="True"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding ControlSizeDefinition.ImageSize, RelativeSource={RelativeSource Self}}" Value="Small">
                            <Setter Property="Height" Value="22"/>
                            <Setter Property="Width" Value="22"/>
                            <Setter Property="Margin" TargetName="PART_Image" Value="0,0"/>
                            <Setter Property="Source" TargetName="PART_Image" Value="{Binding SmallImageSource, RelativeSource={RelativeSource TemplatedParent}}"/>
                            <Setter Property="Width" TargetName="PART_Image" Value="22"/>
                            <Setter Property="Height" TargetName="PART_Image" Value="22"/>
                            <Setter Property="HorizontalAlignment" TargetName="TwoLineText" Value="Left"/>
                            <Setter Property="Margin" TargetName="TwoLineText" Value="1"/>
                            <Setter Property="Orientation" TargetName="StackPanel" Value="Horizontal"/>
                        </DataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding ControlSizeDefinition.ImageSize, RelativeSource={RelativeSource Self}}" Value="Small"/>
                                <Condition Binding="{Binding IsInQuickAccessToolBar, RelativeSource={RelativeSource Self}}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Height" Value="Auto"/>
                        </MultiDataTrigger>
                        <DataTrigger Binding="{Binding ControlSizeDefinition.IsLabelVisible, RelativeSource={RelativeSource Self}}" Value="False">
                            <Setter Property="Text" TargetName="TwoLineText" Value="{x:Null}"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding ControlSizeDefinition.ImageSize, RelativeSource={RelativeSource Self}}" Value="Collapsed">
                            <Setter Property="Visibility" TargetName="PART_Image" Value="Collapsed"/>
                        </DataTrigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="OuterBorder" Value="{Binding MouseOverBackground, RelativeSource={RelativeSource TemplatedParent}}"/>
                            <Setter Property="BorderBrush" TargetName="OuterBorder" Value="{Binding MouseOverBorderBrush, RelativeSource={RelativeSource TemplatedParent}}"/>
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="True">
                            <Setter Property="Background" TargetName="OuterBorder" Value="{Binding FocusedBackground, RelativeSource={RelativeSource TemplatedParent}}"/>
                            <Setter Property="BorderBrush" TargetName="OuterBorder" Value="{Binding FocusedBorderBrush, RelativeSource={RelativeSource TemplatedParent}}"/>
                           
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" TargetName="PART_Image" Value="0.5"/>
                            <Setter Property="TextElement.Foreground" TargetName="OuterBorder" Value="#FF9E9E9E"/>
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsChecked, RelativeSource={RelativeSource Self}}" Value="True"/>
                                <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="OuterBorder" Value="{Binding CheckedBackground, RelativeSource={RelativeSource TemplatedParent}}"/>
                            <Setter Property="BorderBrush" TargetName="OuterBorder" Value="{Binding CheckedBorderBrush, RelativeSource={RelativeSource TemplatedParent}}"/>
                        </MultiDataTrigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" TargetName="OuterBorder" Value="{Binding PressedBackground, RelativeSource={RelativeSource TemplatedParent}}"/>
                            <Setter Property="BorderBrush" TargetName="OuterBorder" Value="{Binding PressedBorderBrush, RelativeSource={RelativeSource TemplatedParent}}"/>
                           
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>